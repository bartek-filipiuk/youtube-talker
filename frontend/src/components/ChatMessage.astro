---
import { marked } from 'marked';
import DOMPurify from 'dompurify';

interface Props {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  isStreaming?: boolean;
}

const { role, content, timestamp, isStreaming } = Astro.props;
const isUser = role === 'user';

// Convert markdown to HTML for assistant messages
let htmlContent = content;
if (!isUser && content) {
  const rawHtml = await marked(content);
  htmlContent = DOMPurify.sanitize(rawHtml);
}

// Format timestamp
const timeStr = new Date(timestamp).toLocaleTimeString('en-US', {
  hour: '2-digit',
  minute: '2-digit'
});
---

<div class={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-4 animate-fade-in`}>
  <div class={`max-w-2xl px-4 py-3 rounded-lg shadow-sm ${
    isUser
      ? 'bg-blue-600 text-white'
      : 'bg-white text-gray-900 border border-gray-200'
  }`}>
    {isUser ? (
      <div class="whitespace-pre-wrap break-words">{content}</div>
    ) : (
      <div class="prose prose-sm max-w-none">
        <div set:html={htmlContent} />
        {isStreaming && (
          <span class="inline-block w-2 h-4 bg-gray-400 animate-pulse ml-1"></span>
        )}
      </div>
    )}
    <div class={`text-xs mt-2 ${isUser ? 'text-blue-100' : 'text-gray-500'}`}>
      {timeStr}
    </div>
  </div>
</div>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.3s ease-out;
  }
</style>
