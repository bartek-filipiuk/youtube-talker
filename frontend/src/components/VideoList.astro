---
/**
 * Video List Component
 *
 * Displays paginated list of user's videos with delete functionality
 */
---

<div class="bg-gray-50 border-b border-gray-200 p-4">
  <!-- Header -->
  <h3 class="text-sm font-semibold text-gray-700 mb-3">Your Videos</h3>

  <!-- Video List -->
  <div id="videosList" class="space-y-2 mb-3">
    <!-- Populated by client-side script -->
  </div>

  <!-- Pagination Controls -->
  <div id="videoPagination" class="flex justify-between items-center text-sm hidden">
    <button
      id="prevPageBtn"
      class="px-3 py-1 text-gray-600 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed"
      disabled
    >
      ← Previous
    </button>
    <span id="pageInfo" class="text-gray-500"></span>
    <button
      id="nextPageBtn"
      class="px-3 py-1 text-gray-600 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed"
      disabled
    >
      Next →
    </button>
  </div>

  <!-- Loading/Error States -->
  <div id="videoLoading" class="text-xs text-gray-500 hidden">Loading videos...</div>
  <div id="videoError" class="text-xs text-red-600 hidden"></div>
</div>

<script>
  import { requireAuth } from '../lib/auth';
  import { getVideos, deleteTranscript } from '../lib/api';
  import { $videoList, setVideos, setLoading, setError, removeVideo, nextPage, prevPage } from '../stores/videos';

  // Ensure user is authenticated
  const auth = await requireAuth();
  if (!auth) {
    throw new Error('Not authenticated');
  }

  const { token } = auth;

  // DOM elements
  const videosList = document.getElementById('videosList') as HTMLDivElement;
  const videoPagination = document.getElementById('videoPagination') as HTMLDivElement;
  const prevPageBtn = document.getElementById('prevPageBtn') as HTMLButtonElement;
  const nextPageBtn = document.getElementById('nextPageBtn') as HTMLButtonElement;
  const pageInfo = document.getElementById('pageInfo') as HTMLSpanElement;
  const videoLoading = document.getElementById('videoLoading') as HTMLDivElement;
  const videoError = document.getElementById('videoError') as HTMLDivElement;

  // Load videos
  async function loadVideos() {
    const state = $videoList.get();
    setLoading(true);
    videoLoading.classList.remove('hidden');
    videoError.classList.add('hidden');

    try {
      const offset = state.currentPage * state.limit;
      const data = await getVideos(token, state.limit, offset);
      setVideos(data.videos, data.total);
    } catch (error: any) {
      console.error('Failed to load videos:', error);
      setError(error.message);
      videoError.textContent = 'Failed to load videos';
      videoError.classList.remove('hidden');
    } finally {
      videoLoading.classList.add('hidden');
    }
  }

  // Escape HTML
  function escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Render videos
  function renderVideos() {
    const state = $videoList.get();

    // Empty state
    if (state.videos.length === 0 && !state.loading) {
      videosList.innerHTML = '<p class="text-xs text-gray-500">No videos yet</p>';
      videoPagination.classList.add('hidden');
      return;
    }

    // Render video list
    videosList.innerHTML = state.videos
      .map((video) => `
        <div class="group flex items-start justify-between p-2 bg-white rounded border border-gray-200">
          <div class="flex-1 min-w-0 pr-2">
            <p class="text-xs text-gray-900 truncate" title="${escapeHtml(video.title)}">
              ${escapeHtml(video.title)}
            </p>
          </div>
          <button
            class="delete-video-btn opacity-0 group-hover:opacity-100 transition p-1 text-gray-400 hover:text-red-600"
            data-id="${video.id}"
            data-title="${escapeHtml(video.title)}"
            title="Delete video"
          >
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </button>
        </div>
      `)
      .join('');

    // Update pagination
    const totalPages = Math.ceil(state.total / state.limit);
    if (totalPages > 1) {
      videoPagination.classList.remove('hidden');
      pageInfo.textContent = `Page ${state.currentPage + 1} of ${totalPages}`;
      prevPageBtn.disabled = state.currentPage === 0;
      nextPageBtn.disabled = state.currentPage >= totalPages - 1;
    } else {
      videoPagination.classList.add('hidden');
    }

    // Attach delete handlers
    document.querySelectorAll('.delete-video-btn').forEach((btn) => {
      btn.addEventListener('click', handleDelete);
    });
  }

  // Handle delete
  async function handleDelete(e: Event) {
    e.stopPropagation();

    const btn = e.currentTarget as HTMLButtonElement;
    const videoId = btn.getAttribute('data-id');
    const title = btn.getAttribute('data-title');

    if (!videoId) return;

    // Confirmation dialog
    const confirmed = confirm(
      `Delete video "${title}"?\n\nThis will delete the transcript but keep your chat conversations.`
    );
    if (!confirmed) return;

    try {
      await deleteTranscript(token, videoId);
      removeVideo(videoId);

      // Reload if page is now empty and not first page
      const state = $videoList.get();
      if (state.videos.length === 0 && state.currentPage > 0) {
        prevPage();
        await loadVideos();
      }
    } catch (error: any) {
      alert('Failed to delete video: ' + error.message);
    }
  }

  // Pagination handlers
  prevPageBtn.addEventListener('click', async () => {
    prevPage();
    await loadVideos();
  });

  nextPageBtn.addEventListener('click', async () => {
    nextPage();
    await loadVideos();
  });

  // Subscribe to store changes
  $videoList.subscribe(() => {
    renderVideos();
  });

  // Initial load
  loadVideos();
</script>
