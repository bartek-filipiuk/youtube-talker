"""add model_pricing table for cost tracking

Revision ID: 4e67c9eefea6
Revises: 1a95e025e49d
Create Date: 2025-10-29 21:13:53.653394

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4e67c9eefea6'
down_revision: Union[str, Sequence[str], None] = '1a95e025e49d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model_pricing',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('model_name', sa.String(length=100), nullable=False),
    sa.Column('pricing_type', sa.String(length=20), nullable=False, comment='per_token, per_request, credit_based'),
    sa.Column('input_price_per_1m', sa.Numeric(precision=10, scale=6), nullable=True, comment='For per_token models: cost per 1M input tokens'),
    sa.Column('output_price_per_1m', sa.Numeric(precision=10, scale=6), nullable=True, comment='For per_token models: cost per 1M output tokens'),
    sa.Column('cost_per_request', sa.Numeric(precision=10, scale=6), nullable=True, comment='For per_request models: fixed cost per API call'),
    sa.Column('cache_discount', sa.Numeric(precision=5, scale=4), nullable=True, comment='Multiplier for cached tokens (e.g., 0.25 for 75% discount)'),
    sa.Column('effective_from', sa.DateTime(timezone=True), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('effective_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('TRUE'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('NOW()'), nullable=False),
    sa.CheckConstraint("pricing_type IN ('per_token', 'per_request', 'credit_based')", name='check_pricing_type'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_model_pricing_lookup', 'model_pricing', ['provider', 'model_name', 'is_active'], unique=False)
    op.create_index(op.f('ix_model_pricing_model_name'), 'model_pricing', ['model_name'], unique=False)
    op.create_index(op.f('ix_model_pricing_provider'), 'model_pricing', ['provider'], unique=False)
    op.create_index('unique_model_pricing', 'model_pricing', ['provider', 'model_name', 'effective_from'], unique=True)
    op.alter_column('chunks', 'user_id',
               existing_type=sa.UUID(),
               comment='Denormalized for fast lookups. RESTRICT prevents multi-cascade path conflict with transcript FK.',
               existing_nullable=False)
    op.alter_column('chunks', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('chunks_user_id_fkey'), 'chunks', type_='foreignkey')
    op.create_foreign_key(None, 'chunks', 'users', ['user_id'], ['id'], ondelete='RESTRICT')
    op.alter_column('config', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('conversations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('conversations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('sessions', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('templates', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('templates', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('transcripts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('user', 'admin', name='user_role'),
               type_=sa.String(length=50),
               existing_nullable=False,
               existing_server_default=sa.text("'user'::user_role"))
    op.drop_index(op.f('idx_users_role'), table_name='users')
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.create_index(op.f('idx_users_role'), 'users', ['role'], unique=False)
    op.alter_column('users', 'role',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('user', 'admin', name='user_role'),
               existing_nullable=False,
               existing_server_default=sa.text("'user'::user_role"))
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('transcripts', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('templates', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('templates', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('sessions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('sessions', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('messages', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('conversations', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('conversations', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('config', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'chunks', type_='foreignkey')
    op.create_foreign_key(op.f('chunks_user_id_fkey'), 'chunks', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('chunks', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('chunks', 'user_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Denormalized for fast lookups. RESTRICT prevents multi-cascade path conflict with transcript FK.',
               existing_nullable=False)
    op.drop_index('unique_model_pricing', table_name='model_pricing')
    op.drop_index(op.f('ix_model_pricing_provider'), table_name='model_pricing')
    op.drop_index(op.f('ix_model_pricing_model_name'), table_name='model_pricing')
    op.drop_index('idx_model_pricing_lookup', table_name='model_pricing')
    op.drop_table('model_pricing')
    # ### end Alembic commands ###
