"""Initial schema

Revision ID: fcd6e385eb69
Revises: 
Create Date: 2025-10-17 20:19:34.217436

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fcd6e385eb69'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Ensure gen_random_uuid() is available
    # Note: PostgreSQL 13+ has this natively, but we enable pgcrypto for compatibility
    # with older versions and to be explicit about dependencies
    op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto;")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('config',
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.CheckConstraint("email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'", name='check_email_format'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('conversations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_conversations_updated_at', 'conversations', ['updated_at'], unique=False)
    op.create_index('idx_conversations_user_id', 'conversations', ['user_id'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_sessions_user_id', 'sessions', ['user_id'], unique=False)
    op.create_index(op.f('ix_sessions_expires_at'), 'sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_sessions_token_hash'), 'sessions', ['token_hash'], unique=True)
    op.create_table('templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('template_type', sa.String(length=50), nullable=False),
    sa.Column('template_name', sa.String(length=255), nullable=False),
    sa.Column('template_content', sa.Text(), nullable=False),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'"), nullable=False),
    sa.Column('is_default', sa.Boolean(), server_default=sa.text('FALSE'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.CheckConstraint("template_type IN ('linkedin', 'twitter', 'blog', 'email')", name='check_template_type'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_templates_type_default', 'templates', ['template_type', 'is_default'], unique=False)
    op.create_index('idx_templates_user_id', 'templates', ['user_id'], unique=False)
    op.create_index('unique_user_template', 'templates', ['user_id', 'template_type', 'template_name'], unique=True)
    # Partial unique index for default templates (user_id IS NULL)
    # Prevents duplicate system defaults since NULL != NULL in SQL unique constraints
    op.create_index(
        'unique_default_template',
        'templates',
        ['template_type', 'template_name'],
        unique=True,
        postgresql_where=sa.text('user_id IS NULL')
    )
    op.create_table('transcripts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('youtube_video_id', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=True),
    sa.Column('channel_name', sa.String(length=255), nullable=True),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('transcript_text', sa.Text(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'"), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_transcripts_metadata', 'transcripts', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('idx_transcripts_user_id', 'transcripts', ['user_id'], unique=False)
    op.create_index(op.f('ix_transcripts_youtube_video_id'), 'transcripts', ['youtube_video_id'], unique=True)
    op.create_table('chunks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('transcript_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('chunk_text', sa.Text(), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('token_count', sa.Integer(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'"), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.ForeignKeyConstraint(['transcript_id'], ['transcripts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_chunks_metadata', 'chunks', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('idx_chunks_transcript_id', 'chunks', ['transcript_id'], unique=False)
    op.create_index(op.f('ix_chunks_user_id'), 'chunks', ['user_id'], unique=False)
    op.create_index('unique_chunk_index', 'chunks', ['transcript_id', 'chunk_index'], unique=True)
    op.create_table('messages',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('conversation_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'"), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('NOW()'), nullable=False),
    sa.CheckConstraint("role IN ('user', 'assistant', 'system')", name='check_role'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_messages_metadata', 'messages', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_messages_conversation_id'), 'messages', ['conversation_id'], unique=False)
    op.create_index(op.f('ix_messages_created_at'), 'messages', ['created_at'], unique=False)
    # ### end Alembic commands ###

    # Custom SQL: Trigger to update conversation.updated_at when message is inserted
    op.execute("""
        CREATE OR REPLACE FUNCTION update_conversation_timestamp()
        RETURNS TRIGGER AS $$
        BEGIN
            UPDATE conversations
            SET updated_at = NOW()
            WHERE id = NEW.conversation_id;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    op.execute("""
        CREATE TRIGGER trigger_update_conversation
            AFTER INSERT ON messages
            FOR EACH ROW
            EXECUTE FUNCTION update_conversation_timestamp();
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # Note: We don't drop the pgcrypto extension in downgrade because:
    # 1. Other databases/apps might be using it
    # 2. PostgreSQL 13+ has gen_random_uuid() natively anyway
    # 3. Extensions are lightweight and safe to leave

    # Drop trigger and function first (before dropping messages table)
    op.execute("DROP TRIGGER IF EXISTS trigger_update_conversation ON messages;")
    op.execute("DROP FUNCTION IF EXISTS update_conversation_timestamp();")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_messages_created_at'), table_name='messages')
    op.drop_index(op.f('ix_messages_conversation_id'), table_name='messages')
    op.drop_index('idx_messages_metadata', table_name='messages', postgresql_using='gin')
    op.drop_table('messages')
    op.drop_index('unique_chunk_index', table_name='chunks')
    op.drop_index(op.f('ix_chunks_user_id'), table_name='chunks')
    op.drop_index('idx_chunks_transcript_id', table_name='chunks')
    op.drop_index('idx_chunks_metadata', table_name='chunks', postgresql_using='gin')
    op.drop_table('chunks')
    op.drop_index(op.f('ix_transcripts_youtube_video_id'), table_name='transcripts')
    op.drop_index('idx_transcripts_user_id', table_name='transcripts')
    op.drop_index('idx_transcripts_metadata', table_name='transcripts', postgresql_using='gin')
    op.drop_table('transcripts')
    op.drop_index('unique_default_template', table_name='templates')
    op.drop_index('unique_user_template', table_name='templates')
    op.drop_index('idx_templates_user_id', table_name='templates')
    op.drop_index('idx_templates_type_default', table_name='templates')
    op.drop_table('templates')
    op.drop_index(op.f('ix_sessions_token_hash'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_expires_at'), table_name='sessions')
    op.drop_index('idx_sessions_user_id', table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('idx_conversations_user_id', table_name='conversations')
    op.drop_index('idx_conversations_updated_at', table_name='conversations')
    op.drop_table('conversations')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('config')
    # ### end Alembic commands ###
